{"version":3,"sources":["main.js"],"names":["htmlElement","constructor","element","this","copy","clone","remove","append","parent","tetragon3d","speed","super","rotationSpeed","clickedId","planes","children","speedMeasure","start","undefined","stop","lastMeasuredAngle","speedArr","avgSpeed","motionData","currentAngle","targetAngle","move","easing","calculateEntryValues","animateRotationY","computeAvgSpeed","length","applyEasing","css","window","requestAnimationFrame","animatePlane","computeEasing","direction","slowAngles","delay","speedChange","startEase","Math","abs","distance","threshold","steps","baseSpeed","i","push","parseFloat","toFixed","forEach","value","round","computeRotatingTime","rotationTime","floor","flag","measureAngle","arg","Date","getTargetAngle","shift","reduce","a","b","e","$","target","attr","shouldChangeDirection","myPlane","filter","el","addClass","planeClickEvent","off","on","id","myElement"],"mappings":"AAAA,MAAMA,YACJC,YAAYC,GACVC,KAAKD,QAAUA,EAEjBE,OACE,OAAOD,KAAKD,QAAQG,QAEtBC,SACEH,KAAKD,QAAQI,SAEfC,OAAOC,GACHL,KAAKD,QAAQK,OAAOC,IAI1B,MAAMC,mBAAmBT,YACvBC,YAAYC,EAASQ,GACnBC,MAAMT,GACNC,KAAKS,cAAgBF,EAAQ,EAAI,EAAIA,EACrCP,KAAKU,UAAa,GAClBV,KAAKW,OAASX,KAAKD,QAAQa,SAAS,OACpCZ,KAAKa,aAAe,CAClBC,WAAOC,EACPC,UAAMD,EACNE,uBAAmBF,EACnBG,SAAU,GACVC,cAAUJ,GAEZf,KAAKoB,WAAa,CAChBC,aAAc,EACdC,iBAAaP,EACbQ,MAAM,GAERvB,KAAKwB,OAAS,GAEhBC,uBACEzB,KAAKa,aAAaM,SAAY,IAAA,GAAOnB,KAAKS,eAI5CiB,mBAIE,GAFM1B,KAAKa,aAAaM,UAAWnB,KAAKyB,uBAEnCzB,KAAKoB,WAAWG,KAAM,CAGzB,IAAAd,EAAAT,KAAqBS,sBAArBT,KAAK2B,gBAAgBlB,GAEM,IAAvBT,KAAKwB,OAAOI,QAAc5B,KAAK6B,cAGnC7B,KAAKoB,WAAWC,cAAgBrB,KAAKS,cAGrCT,KAAKD,WAALsB,aAAgCrB,KAAAoB,WAAAC,eAA8B,IAAKD,EAAAA,KAAWC,WAAaA,aAE3FrB,KAAAD,QAAA+B,IAAA,2CAAA9B,KAAAoB,WAAAC,oBAIAU,KAAOC,KAAAA,KAAAA,WAAuBX,gBAAUK,KAAAA,WAAxCJ,cAjBFtB,KAmBKoB,WAAAG,MAAA,GAEHQ,OAAAC,sBAAA,IAAAhC,KAAA0B,yBADA1B,KAAKiC,eAUPC,cAAAC,GAAA,IAAqDC,EAArDC,EAAA9B,EAAA+B,EAAAC,EAAAH,EAAsB7B,EAAtBiC,KAAAC,IAAAD,KAAAC,IAAAzC,KAAAoB,WAAAE,aAAAkB,KAAAC,IAAAzC,KAAAoB,WAAAC,eAA0CkB,EAAAA,EAA1C,GAAA,EAAA,GAAAf,EAAA,GAAiEA,EAAjExB,KAAAS,cAGA,QAAQ,GAAR,KAAAiC,GAAA,GACEL,EAAKK,EACHL,MACA,KAAAK,GAAA,GACFL,EAAKK,EACHL,MACA,KAAAK,GAAA,GACFL,EAAKK,EACHL,MACA,KAAAK,GAAA,GACFL,EAAKK,GACHL,MACA,KAAAK,GAAA,GACFL,EAAKK,GACHL,MACA,KAAAK,GAAA,GACFL,EAAKK,GACHL,MACA,KAAAK,GAAA,GACFL,EAAKK,GACHL,MACA,KAAAK,GAAA,GACFL,EAAKK,GACHL,MACA,KAAAK,GAAA,GACFL,EAAKK,GAMPC,GAAcD,EAAWL,GAAUO,EAAnCD,EAAcD,EAAWL,EACzBC,EAAAA,EAEAC,EADAhC,EAAA,UAAQsC,EAAR7C,KAAAoB,WAAAC,aAAAgB,EAAArC,KAAAoB,WAAAC,aAAAgB,EAIAM,EAA0B,UAAdR,GAAyBQ,EAAYA,EAGjD,IAAA,IAAIG,EAAIA,EAARA,EAAeA,EAAfA,IACEV,GAAcO,EAGGpC,GAFjBA,GAAS+B,GAET,EAAyB/B,EAAQ,IAAO,IAAOA,EAClCA,GAAS,KAAQ,IAAOA,EAErCiB,EAAOsB,EAAE,GAAK,GAGdtB,EAAOsB,EAAAA,GAAPC,KAAAP,KAAkBQ,MAAYzC,IAC/BiB,EAAAsB,EAAA,GAAAC,KAAAC,WAAAzC,EAAA0C,QAAA,KAGF,OAAAzB,EAGCK,cAGC7B,KAHDwB,OAAA0B,QAAAC,IAIDX,KAAAY,MAAApD,KAAAoB,WAAAC,gBAAA8B,EAAA,KACDE,KAAAA,cAAqBF,EAAA,MAGnBE,sBADA,IAKAC,EALIjC,EAAemB,KAAKC,IAAKD,KAAKe,MAAMvD,KAAKoB,WAAWC,eAMpDmC,IAAK3C,EAAaI,IAKtB,OAAAjB,KAAKa,aAAaI,oBAAoBI,EAJ7B,MAUPrB,KAAAa,aAAOyC,kBAAPjC,EAGFrB,KAAAa,aAAY4C,eAAApC,GACVrB,KAAKa,aAAa4C,KAAAA,IAAAA,KAClBH,GAAAtD,KAAkBc,aAAQE,KAA1BhB,KAAAa,aAAAC,OAAA,MAIJa,IALI3B,KAAKa,aAAa4C,aAAgD,MAAjCzD,KAAKoB,WAAWC,aAAuB,GAAKA,EAAe,GAO9FrB,KAAK0D,aAAe5C,MAAA,IAAA6C,MAEf9C,OAELc,gBAAUd,GAGT,OAAA6C,IAGF1D,KAAAa,aAAAK,SAAA6B,KAAAW,GAEDE,KAAAA,aAAmB1C,SAAAU,OAAA,GAPf5B,KAAKa,aAAaK,SAAS2C,QAW7B7D,KAAAa,aAAAM,SAAAnB,KAAAa,aAAAK,SAAA4C,OAAA,CAAAC,EAAAC,IAAAD,EAAAC,EAAA,GAAAhE,KAAAa,aAAAK,SAAAU,QAIEgC,eAAAK,GAIE,OAFAC,EAAAD,EAAAE,QAAAC,KAAA,OAGA,IAAA,QACFpE,KAAKoB,WAALE,YAAA,EACE,MACA,IAAA,QAZJtB,KAAAoB,WAAAE,aAAA,GAcD,MACD+C,IAAAA,OACMlC,KAAAA,WAAYb,aAAhB,IACI,MACF,IAAA,OACAtB,KAAKS,WAALa,aAA0BF,KAI1BiD,wBACAlC,IAAAA,EAAY,QAYf,OAXE,IAAAnC,KAAAoB,WAAAE,aAEFtB,KAAAS,cAAAT,KAAAoB,WAAAC,cAAA,IAAArB,KAAAS,eAAAT,KAAAS,cAPG0B,EAAYnC,KAAKoB,WAAWC,cAAgB,IAAM,QAAW,QASjEY,KAAcb,WAAAC,aAAArB,KAAAoB,WAAAE,cAEZtB,KAAIsE,eAAe3D,KAAO4D,cAPxBpC,EAAY,QAYfA,EAGCF,eAES2B,KAAAA,OAALW,OAAA,CAAAzB,EAAA0B,IAAAN,EAAAM,GAAAJ,KAAA,QAAApE,KAAAU,WARQ+D,SAAS,SAWjB3C,IAAA,UAAIK,KACJL,IAAA,YAAc,QAIhB4C,gBAAYC,GACbnB,EAEFxD,KAAAW,OAAAiE,GAAA,QAAAX,IAXKjE,KAAK4D,eAAeK,GAnNQjE,KAAAU,UAAAuD,EAAAE,OAAAU,GAoO5B,IAAA1C,EAAAnC,KAAAqE,wBAbArE,KAAKwB,OAASxB,KAAKkC,cAAcC,KAazCnC,KAAAW,OAAAgE,OAAAT,EAAE,KAEA,IAAIY,EAAY,IAAIxE,WAAW4D,EAAE,cAAc,GAC/CY,EAAUpD,mBACVoD,EAAUJ,iBAAgB","file":"main.js","sourcesContent":["class htmlElement {\n  constructor(element){\n    this.element = element\n  }\n  copy(){\n    return this.element.clone()\n  }\n  remove(){\n    this.element.remove()\n  }\n  append(parent){\n      this.element.append(parent)\n  }\n}\n\nclass tetragon3d extends htmlElement{\n  constructor(element ,speed){\n    super(element);\n    this.rotationSpeed = speed > 1 ? 1 : speed;\n    this.clickedId =  '';\n    this.planes = this.element.children('div');\n    this.speedMeasure = {\n      start: undefined,\n      stop: undefined,\n      lastMeasuredAngle: undefined,\n      speedArr: [],\n      avgSpeed: undefined\n    };\n    this.motionData = {\n      currentAngle: 0,\n      targetAngle: undefined,\n      move: true\n    };\n    this.easing = [];\n  }\n  calculateEntryValues() {\n    this.speedMeasure.avgSpeed = (30 / ( this.rotationSpeed * 60 ) );\n\n  }\n\n  animateRotationY() {\n\n    if ( !this.speedMeasure.avgSpeed ) this.calculateEntryValues();\n\n    if ( this.motionData.move ){\n\n      let rotationSpeed = this.computeRotatingTime();\n      this.computeAvgSpeed(rotationSpeed);\n\n      if (this.easing.length !== 0) this.applyEasing();\n\n\n      this.motionData.currentAngle -= this.rotationSpeed;\n      this.motionData.currentAngle = this.motionData.currentAngle <= -360 ? 0 : this.motionData.currentAngle;\n\n      this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this.motionData.currentAngle}deg)` );\n\n      // targetAngle is set in click event, so after click event rotation will stop\n      if( Math.ceil(this.motionData.currentAngle) === this.motionData.targetAngle )\n        this.motionData.move = false;\n\n      window.requestAnimationFrame( ()=> this.animateRotationY() )\n    }\n    else {\n      this.animatePlane()\n      return\n    }\n  }\n\n\n  computeEasing(direction){\n    let distance = Math.abs( Math.abs(this.motionData.targetAngle) - Math.abs(this.motionData.currentAngle) );\n\n    let steps = distance < 20 ? 5 : 10;\n    let threshold, delay, speed, speedChange, startEase, slowAngles, easing = [];\n    let baseSpeed = this.rotationSpeed;\n\n    switch (true) {\n      case distance <= 10 :\n        delay = 0;\n        break;\n      case distance <= 20 :\n        delay = 3;\n        break;\n      case distance <= 30 :\n        delay = 8;\n        break;\n      case distance <= 40 :\n        delay = 15;\n        break;\n      case distance <= 50 :\n        delay = 24;\n        break;\n      case distance <= 60 :\n        delay = 32;\n        break;\n      case distance <= 70 :\n        delay = 40;\n        break;\n      case distance <= 80 :\n        delay = 50;\n        break;\n      case distance <= 90 :\n        delay = 60;\n        break;\n\n    }\n\n    threshold = ( distance - delay ) / steps;\n    speedChange = baseSpeed/steps;\n    speed = baseSpeed;\n    startEase = direction === \"forth\" ? this.motionData.currentAngle - delay : this.motionData.currentAngle + delay;\n    slowAngles = startEase;\n\n    threshold = direction === \"forth\" ? -threshold : threshold;\n\n\n    for(let i = 1; i < steps; i++){\n      slowAngles += threshold;\n      speed -= speedChange;\n\n      if ( speed > 0 ) speed = speed < 0.15 ? 0.15 : speed;\n      else speed = speed > -0.15 ? -0.15 : speed;\n\n      easing[i-1] = [];\n\n      easing[i-1].push( Math.round( slowAngles ) );\n      easing[i-1].push( parseFloat( speed.toFixed(2) ) );\n    }\n    return easing;\n\n  }\n  applyEasing(){\n\n    this.easing.forEach(  value => {\n      if ( Math.round(this.motionData.currentAngle) === value[0] )\n        this.rotationSpeed = value[1];\n    })\n  }\n  computeRotatingTime(){\n\n    let currentAngle = Math.abs( Math.floor(this.motionData.currentAngle) );\n    let rotationTime;\n    let flag = !(currentAngle % 31);\n\n\n    // return if current angle haven't change from last measurement\n    if (this.speedMeasure.lastMeasuredAngle === currentAngle){\n      return null;\n    }\n\n\n    this.speedMeasure.lastMeasuredAngle = currentAngle;\n\n\n    if(this.speedMeasure.measureAngle === currentAngle){\n      this.speedMeasure.stop = new Date();\n      rotationTime =  (this.speedMeasure.stop - this.speedMeasure.start)/1000;\n      return rotationTime;\n    }\n    //every 31 degrees start time, and angle, at which speed will be measured, are set\n    if ( flag ) {\n      this.speedMeasure.measureAngle = this.motionData.currentAngle === 360 ? 30 : currentAngle + 30;\n      this.speedMeasure.start = new Date();\n    }\n    return null\n  }\n  computeAvgSpeed(arg){\n\n    if ( arg === null ) return;\n\n    this.speedMeasure.speedArr.push(arg);\n\n    if ( this.speedMeasure.speedArr.length > 4 ){\n      this.speedMeasure.speedArr.shift();\n\n    }\n    this.speedMeasure.avgSpeed = this.speedMeasure.speedArr.reduce((a,b) => a + b, 0) / this.speedMeasure.speedArr.length;\n\n  }\n\n  getTargetAngle (e) {\n\n    const targetId = $(e.target).attr(\"id\");\n\n    switch (targetId) {\n      case \"front\":\n        this.motionData.targetAngle = 0;\n        break;\n      case \"right\":\n        this.motionData.targetAngle = -90;\n        break;\n      case \"back\":\n        this.motionData.targetAngle = -180;\n        break;\n      case \"left\":\n        this.motionData.targetAngle = -270;\n        break;\n    }\n  }\n  shouldChangeDirection(){\n    let direction = \"forth\";\n    if( this.motionData.targetAngle === 0 ){\n      //if clicked in front plane, which set target angle to 0 , must have special check, cause current angle is always lesser than 0\n      this.rotationSpeed = this.motionData.currentAngle < -180 ? this.rotationSpeed : -this.rotationSpeed;\n      direction = this.motionData.currentAngle < -180 ? \"forth\" :  \"back\"\n    } else if ( this.motionData.currentAngle < this.motionData.targetAngle ){\n      //all the other cases\n      this.rotationSpeed = -this.rotationSpeed;\n      direction = \"back\"\n    }\n    return direction\n  }\n\n  animatePlane(){\n\n    let myPlane = this.planes.filter( ( i,el ) => $(el).attr('id') === this.clickedId);\n\n        myPlane.addClass(\"focus\")\n      .css('opacity', '1')\n      .css('font-size', '50px')\n  }\n\n  planeClickEvent(flag){\n    if(flag){\n      this.planes.on( 'click', (e)=> {\n        this.getTargetAngle(e);\n        this.clickedId = e.target.id;\n\n        let direction = this.shouldChangeDirection();\n        this.easing = this.computeEasing(direction);\n\n      } )\n    } else {\n      this.planes.off()\n    }\n\n  }\n\n\n\n}\n\n$(() => {\n\n  let myElement = new tetragon3d($('#top-layer'),1);\n  myElement.animateRotationY();\n  myElement.planeClickEvent(true);\n\n});"]}