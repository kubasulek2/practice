{"version":3,"sources":["main.js"],"names":["htmlElement","constructor","element","this","copy","clone","remove","append","parent","tetragon3d","speed","super","rotationSpeed","planes","children","timeData","then","undefined","now","motionData","currentAngle","targetAngle","move","animateRotationY","computeRotatingTime","css","Math","ceil","window","requestAnimationFrame","computeTransitionSpeed","distance","abs","console","measure","rotationTime","floor","Number","Date","angle","getTargetAngle","targetId","$","e","target","attr","planeClickEvent","flag","transitionSpeed","shouldChangeDirection","off","myElement","easing","easeOutQuad","t","b","c","d"],"mappings":"AAAA,MAAMA,YACJC,YAAYC,GACVC,KAAKD,QAAUA,EAEjBE,OACE,OAAOD,KAAKD,QAAQG,QAEtBC,SACEH,KAAKD,QAAQI,SAEfC,OAAOC,GACHL,KAAKD,QAAQK,OAAOC,IAI1B,MAAMC,mBAAmBT,YACvBC,YAAYC,EAASQ,GACnBC,MAAMT,GACNC,KAAKS,cAAgBF,EAAQ,EAAI,EAAIA,EAErCP,KAAKU,OAASV,KAAKD,QAAQY,SAAS,OACpCX,KAAKY,SAAW,CACdC,UAAMC,EACNC,SAAKD,GAEPd,KAAKgB,WAAa,CAChBC,aAAc,EACdC,iBAAaJ,EACbP,WAAOO,EACPK,MAAM,GAKVC,mBAEOpB,KAAKgB,WAAWG,OAEnBnB,KAAKgB,WAAWT,MAAQP,KAAKqB,oBAAqB,IAElDrB,KAAKgB,WAAWC,aAAejB,KAAKgB,WAAWC,cAAgB,IAAM,EAAIjB,KAAKgB,WAAWC,aACzFjB,KAAKgB,WAAWC,cAAgBjB,KAAKS,cAErCT,KAAKD,QAAQuB,IAAK,2CAA4CtB,KAAKgB,WAAWC,oBAG1EM,KAAKC,KAAKxB,KAAKgB,WAAWC,gBAAkBjB,KAAKgB,WAAWE,cAC9DlB,KAAKgB,WAAWG,MAAO,GAG1BM,OAAAC,sBAAA,IAAA1B,KAAAoB,qBAIDO,yBAGD,OAFaC,KAAAA,IAAW5B,KAAvBgB,WAAAE,aAAAK,KAAAM,IAAA7B,KAAAgB,WAAAC,eACoBD,GACrBhB,KAAAgB,WAAAT,MAGCuB,oBAAiBd,GAEjB,IAAIe,EADJD,QAAIE,IAAAA,KAAJhB,WAAAT,OACA,IAAIwB,EAAUR,KAAKM,IAAKN,KAAKU,MAAMjC,KAAKgB,WAAWC,eAOjD,OALsB,IAApBiB,OAAOH,GAAgB/B,KAAKY,SAASC,KAAO,IAAIsB,KAG5CvB,IAAL,EAAqBwB,IAAKxB,KAALA,SAAoBG,IAAA,IAAAoB,MAE1CnC,KAAKY,SAASG,KAAMD,KAAAA,SAApBD,MACAmB,GAAcnB,KAAOC,SAArBC,IAAAf,KAAAY,SAAAC,MAAA,IACAb,KAAAY,SAAOoB,SAAPlB,EACDd,KAAAY,SAAAC,UAAAC,EACMkB,GAAAhC,KAAKgB,WAAWT,MAKvB8B,eAAMC,GAIF,OAFJC,EAAAC,EAAAC,QAAAC,KAAA,OAGI,IAAA,QACF1C,KAAKgB,WAALE,YAAA,EACE,MACA,IAAA,QACFlB,KAAKgB,WAALE,aAAA,GACE,MACA,IAAA,OACFlB,KAAKgB,WAALE,aAAA,IACE,MACA,IAAA,OAZJlB,KAAAgB,WAAAE,aAAA,KAkBDY,wBACA9B,KAAAgB,WAAAC,aAAAjB,KAAAgB,WAAAE,cAFGlB,KAAKS,eAAiBT,KAAKS,eAI/BkC,QAAAA,IAAAA,KAAgBC,WAAK3B,aAAAjB,KAAAgB,WAAAE,aAGfyB,gBAAKN,GAFNO,EAIC5C,KAAAU,OAAImC,GAAAA,QAAkBL,IACtBxC,KAAK8C,eAAAA,GAGF9C,KAAA2B,yBACL3B,KAAKU,0BAhGyBV,KAAAU,OAAAqC,OAgHhCR,EAAA,KACD,IAHDS,EAAA,IAAA1C,WAAAiC,EAAA,cAAA,GAHAS,EAAU5B,mBAQV4B,EAAIC,iBAAcC,GALlB3B,KAAK2B,YAAc,SAAUC,EAAGC,EAAGC,EAAGC,GAEpC,OAAQD,GADRF,GAAKG,IACUH,EAAE,GAAKC,GAGX7B,KAAK2B,YAAY,GAAI,GAAG,GAAG","file":"main.js","sourcesContent":["class htmlElement {\n  constructor(element){\n    this.element = element\n  }\n  copy(){\n    return this.element.clone()\n  }\n  remove(){\n    this.element.remove()\n  }\n  append(parent){\n      this.element.append(parent)\n  }\n}\n\nclass tetragon3d extends htmlElement{\n  constructor(element ,speed){\n    super(element);\n    this.rotationSpeed = speed > 1 ? 1 : speed;\n\n    this.planes = this.element.children('div');\n    this.timeData = {\n      then: undefined,\n      now: undefined\n    };\n    this.motionData = {\n      currentAngle: 0,\n      targetAngle: undefined,\n      speed: undefined,\n      move: true\n\n    }\n  }\n\n  animateRotationY() {\n\n    if ( this.motionData.move ){\n\n      this.motionData.speed = this.computeRotatingTime( 45 );\n\n      this.motionData.currentAngle = this.motionData.currentAngle < -360 ? 0 : this.motionData.currentAngle;\n      this.motionData.currentAngle -= this.rotationSpeed;\n\n      this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this.motionData.currentAngle}deg)` );\n\n      // targetAngle is set in click event, so after click event rotation will stop\n      if( Math.ceil(this.motionData.currentAngle) === this.motionData.targetAngle )\n        this.motionData.move = false;\n\n      window.requestAnimationFrame( ()=> this.animateRotationY() )\n    }\n  }\n\n  computeTransitionSpeed(){\n    let distance = Math.abs(this.motionData.targetAngle) - Math.abs(this.motionData.currentAngle);\n    let ratio = distance / 45;\n    return ratio * this.motionData.speed\n  }\n\n  computeRotatingTime(angle){\n    console.log(this.motionData.speed);\n    let rotationTime;\n    let measure = Math.abs( Math.floor(this.motionData.currentAngle) );\n\n    if (Number(measure) === 1) this.timeData.then = new Date();\n    else if (measure === 1 + angle)  this.timeData.now = new Date;\n\n    if(this.timeData.now && this.timeData.then) {\n      rotationTime =  (this.timeData.now - this.timeData.then)/1000;\n      this.timeData.now = undefined;\n      this.timeData.then = undefined;\n      return rotationTime;\n    }\n    return this.motionData.speed;\n  }\n\n  getTargetAngle (e) {\n\n    const targetId = $(e.target).attr(\"id\");\n\n    switch (targetId) {\n      case \"front\":\n        this.motionData.targetAngle = 0;\n        break;\n      case \"right\":\n        this.motionData.targetAngle = -90;\n        break;\n      case \"back\":\n        this.motionData.targetAngle = -180;\n        break;\n      case \"left\":\n        this.motionData.targetAngle = -270;\n        break;\n    }\n  }\n  shouldChangeDirection(){\n    if ( this.motionData.currentAngle < this.motionData.targetAngle )\n      this.rotationSpeed = -this.rotationSpeed;\n   console.log(this.motionData.currentAngle < this.motionData.targetAngle);\n  }\n\n  planeClickEvent(flag){\n    if(flag){\n      this.planes.on( 'click', (e)=> {\n        this.getTargetAngle(e);\n\n        let transitionSpeed = this.computeTransitionSpeed();\n        this.shouldChangeDirection();\n\n      } )\n    } else {\n      this.planes.off()\n    }\n\n  }\n\n\n\n}\n\n$(() => {\n  let myElement = new tetragon3d($('#top-layer'),5);\n  myElement.animateRotationY();\n  myElement.planeClickEvent(true);\n\n  Math.easeOutQuad = function (t, b, c, d) {\n    t /= d;\n    return -c * t*(t-2) + b;\n  };\n\n  let easing = Math.easeOutQuad(0.6,54,36,0.4);\n});"]}