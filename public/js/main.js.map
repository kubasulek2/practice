{"version":3,"sources":["main.js"],"names":["htmlElement","constructor","element","this","copy","clone","remove","append","parent","tetragon3d","speed","super","baseSpeed","rotationSpeed","clickedId","planes","children","speedMeasure","start","undefined","stop","lastMeasuredAngle","speedArr","avgSpeed","motionData","currentAngle","targetAngle","move","easing","calculateEntryValues","animateRotationY","computeAvgSpeed","length","applyEasing","accelerate","css","Math","window","animatePlane","computeEasing","threshold","startEase","delay","speedChange","slowAngles","abs","distance","steps","i","push","parseFloat","toFixed","round","value","computeRotatingTime","rotationTime","flag","floor","measureAngle","Date","arg","getTargetAngle","shift","reduce","a","b","e","shouldChangeDirection","direction","myPlane","planeClickEvent","on","el","$","attr","stopPropagation","target","currentTarget","id","restoreAnimation","one","targetPlane","off","filter","removeClass","myElement"],"mappings":"AAAA,MAAMA,YACJC,YAAYC,GACVC,KAAKD,QAAUA,EAEjBE,OACE,OAAOD,KAAKD,QAAQG,QAEtBC,SACEH,KAAKD,QAAQI,SAEfC,OAAOC,GACHL,KAAKD,QAAQK,OAAOC,IAI1B,MAAMC,mBAAmBT,YACvBC,YAAYC,EAASQ,GACnBC,MAAMT,GACNC,KAAKS,UAAYF,EAAQ,EAAI,EAAIA,EACjCP,KAAKU,cAAgBH,EAAQ,EAAI,EAAIA,EACrCP,KAAKW,UAAa,GAClBX,KAAKY,OAASZ,KAAKD,QAAQc,SAAS,SACpCb,KAAKc,aAAe,CAClBC,WAAOC,EACPC,UAAMD,EACNE,uBAAmBF,EACnBG,SAAU,GACVC,cAAUJ,GAEZhB,KAAKqB,WAAa,CAChBC,aAAc,EACdC,iBAAaP,EACbQ,MAAM,GAERxB,KAAKyB,OAAS,GAEhBC,uBACE1B,KAAKc,aAAaM,SAAY,IAAA,GAAOpB,KAAKU,eAI5CiB,mBAIE,GAFM3B,KAAKc,aAAaM,UAAWpB,KAAK0B,uBAEnC1B,KAAKqB,WAAWG,KAAM,CAGzB,IAAAd,EAAAV,KAAqBU,sBAArBV,KAAK4B,gBAAgBlB,GAEM,IAAvBV,KAAKyB,OAAOI,QAAc7B,KAAK8B,cAET,IAAvB9B,KAAKyB,OAAOI,QAAgB7B,KAAKU,cAAgBV,KAAKS,WAAWT,KAAK+B,aAGzE/B,KAAKqB,WAAWC,cAAgBtB,KAAKU,cAGrCV,KAAKD,WAALuB,aAAgCtB,KAAAqB,WAAAC,eAA8B,IAAKD,EAAAA,KAAWC,WAAaA,aAE3FtB,KAAAD,QAAAiC,IAAA,2CAAAhC,KAAAqB,WAAAC,oBAIEW,KAAKlC,MAAQiC,KAAKX,WAAlBC,gBAAgCtB,KAAAqB,WAA8BE,cAC/DvB,KAAAqB,WAAAG,MAAA,EADCxB,KAAKD,QAAQiC,IAAK,2CAA4ChC,KAAKqB,WAAWE,oBAMhFW,OAAKC,sBAAL,IAAAnC,KAAA2B,yBAAA3B,KAAKmC,eASPC,cAAIC,GAAJ,IAA0CC,EAA1CC,EAAAhC,EAAAiC,EAAAF,EAAAG,EAAeF,EAAfN,KAAAS,IAAAT,KAAAS,IAAA1C,KAAAqB,WAAAE,aAAAU,KAAAS,IAAA1C,KAAAqB,WAAAC,eAA6BkB,EAAAA,EAA7B,GAAA,EAAA,GAAAf,EAAA,GAAqDgB,EAArDzC,KAAAU,cACA,QAAID,GAGF,KAAKkC,GAAY,GADnBJ,EAAA,EACE,MACEA,KAAAA,GAAA,GACAA,EAAA,EACF,MACEA,KAAAA,GAAA,GACAA,EAAA,EACF,MACEA,KAAAA,GAAA,GACAA,EAAA,GACF,MACEA,KAAAA,GAAA,GACAA,EAAA,GACF,MACEA,KAAAA,GAAA,GACAA,EAAA,GACF,MACEA,KAAAA,GAAA,GACAA,EAAA,GACF,MACEA,KAAAA,GAAA,GACAA,EAAA,GACF,MACEA,KAAAA,GAAA,GACAA,EAAA,GAxBJF,GAAAM,EAAAJ,GAAAK,EAgCAJ,EAAc/B,EAAUmC,EADxBP,EAAAA,EAEA9B,EADAiC,EAAwBI,UAAxBJ,EAAAxC,KAAAqB,WAAAC,aAAAiB,EAAAvC,KAAAqB,WAAAC,aAAAiB,EAGAE,EAAA,UAAAA,GAAAJ,EAAAA,EAKA,IAAI,IAAIQ,EAAI,EAAGA,EAAID,EAAOC,IAA1BJ,GAAeI,EAIItC,GAHjBkC,GAAAA,GAGa,EAAYlC,EAAQ,GAAM,GAAMA,EAA7CA,GAAiBA,IAAQA,GAAAA,EAGzBkB,EAAOoB,EAAAA,GAAP,GAEApB,EAAOoB,EAAAA,GAAPC,KAAAb,KAAkBA,MAAYQ,IAC9BhB,EAAOoB,EAAAA,GAAPC,KAAAC,WAA8BxC,EAAMyC,QAAQ,KAE9C,OAAOvB,EAGTK,cAGI9B,KAAAyB,OAAUwB,QAAW5B,IADvBY,KAAAgB,MAAAjD,KAAAqB,WAAAC,gBAAA4B,EAAA,KAIDlD,KAAAU,cAAAwC,EAAA,MAGCC,sBAEA,IADIC,EACAC,EAAS/B,KAAAA,IAAeW,KAA5BqB,MAAAtD,KAAAqB,WAAAC,eAGA+B,IAAA/B,EAAA,IACA,OAAItB,KAAKc,aAAaI,oBAAsBI,EAKvCR,MAKHsC,KAAAA,aAAiBlC,kBAAkBD,EAGrCjB,KAAAc,aAAAyC,eAAAjC,GACAtB,KAAKqD,aAAOpC,KAAA,IAAAuC,KACVJ,GAAApD,KAAkBuD,aAAetC,KAAKI,KAAAA,aAAWC,OAAiB,MAIrE+B,IACDzB,KAAAA,aAAoB2B,aAAA,MAAAvD,KAAAqB,WAAAC,aAAA,GAAAA,EAAA,GAJhBtB,KAAKc,aAAaC,MAAQ,IAAIyC,MAEzB,OAET5B,gBAAgB6B,GAOP3C,OAAL2C,IAGFzD,KAAKc,aAAaM,SAAlB0B,KAA6BW,GAJxBzD,KAAKc,aAAaK,SAASU,OAAS,GAQ3C6B,KAAAA,aAAmBvC,SAAAwC,QAJjB3D,KAAKc,aAAaM,SAAWpB,KAAKc,aAAaK,SAASyC,OAAO,CAACC,EAAEC,IAAMD,EAAIC,EAAG,GAAK9D,KAAKc,aAAaK,SAASU,QAW3G6B,eAAAK,GAIF,OAFO1C,EAAL0C,EAAgBxC,QAAAA,KAAc,OAG9B,IAAA,QACAvB,KAAAqB,WAAAE,YAAA,EACF,MACE,IAAA,QACAvB,KAAAqB,WAAAE,aAAA,GAZJ,MAcD,IAAA,OANKvB,KAAKqB,WAAWE,aAAe,IAQrCyC,MACE,IAAIC,OACAjE,KAAKqB,WAAWE,aAAhB,KAKFyC,wBACA,IAAAC,EAAKvD,QAUPwD,OATE,IAAAD,KAAAA,WAAA1C,aAEFvB,KAAOiE,cAAPjE,KAAAqB,WAAAC,cAAA,IAAAtB,KAAAU,eAAAV,KAAAU,cACDuD,EAAAjE,KAAAqB,WAAAC,cAAA,IAAA,QAAA,QANatB,KAAKqB,WAAWC,aAAetB,KAAKqB,WAAWE,cAEzDvB,KAAKU,eAAiBV,KAAKU,cAQ7BuD,EAAc,QAEdC,EAGFC,eAEgBC,KAAIxD,OAAUmD,OAAK,CAAAlB,EAAAwB,IAAAC,EAAAD,GAAAE,KAAA,QAAAvE,KAAAW,WAE3B6D,SAAAA,SAJRL,gBAAgBd,GAQVA,EACArD,KAAAY,OAAKa,GAAS,QAAKW,IANnB,IAAIqC,EAASH,EAAEP,EAAEW,eAQjBD,EAAAA,kBANAzE,KAAK0D,eAAeK,GAQpBO,KAAE3D,UACKoD,EAAAU,OAAUE,GAGbL,IAAEP,EAAEW,KAAe1C,wBACnBhC,KAAAyB,OAAKmD,KAAAA,cAALX,GAhBNQ,EAAAzC,IAAA,SAAA,WAqBAsC,EAAA,QACDtC,IAAA,SAAA,WAEF6C,IAAA,QAAAd,IAVSU,EAAOzC,IAAI,SAAU,WAY/B4C,EAAAA,EAAAA,eAAkB5C,IAAA,SAAA,WACZ8C,KAAAA,uBAMJ9E,KAAKW,OAALoE,MAKCH,mBAEF,IAAAE,EAAA9E,KAAAY,OAZIoE,OAAQ,CAAEnC,EAAEwB,IAAQC,EAAED,GAAIE,KAAK,QAAUvE,KAAKW,WAcnDoB,EAAYkD,YAAA,SACVjF,KAAKU,OAAAA,GACNV,KAAAqB,WAAAG,MAAA,EAZCxB,KAAKqB,WAAWE,iBAAcP,EAtPEhB,KAAAW,UAAA,GAwPhCX,KAAKU,cAAgBV,KAAKU,cAAgB,GAAKV,KAAKU,cAAgBV,KAAKU,cAEzEoE,EAAYD,IAAI,gBAAkB,KAcpC7E,KAAM2B,qBARNI,aACE/B,KAAKU,cAAiBqC,YAAc/C,KAAKU,cAAgB,KAAOsC,QAAQ,KAK5E,IAAIkC,UAAY,IAAI5E,WAAWgE,EAAE,cAAc,IAE/CA,EAAE,KAGAY,UAAUvD,mBACVuD,UAAUf,iBAAgB","file":"main.js","sourcesContent":["class htmlElement {\n  constructor(element){\n    this.element = element\n  }\n  copy(){\n    return this.element.clone()\n  }\n  remove(){\n    this.element.remove()\n  }\n  append(parent){\n      this.element.append(parent)\n  }\n}\n\nclass tetragon3d extends htmlElement{\n  constructor(element ,speed){\n    super(element);\n    this.baseSpeed = speed > 1 ? 1 : speed;\n    this.rotationSpeed = speed > 1 ? 1 : speed;\n    this.clickedId =  '';\n    this.planes = this.element.children('.face');\n    this.speedMeasure = {\n      start: undefined,\n      stop: undefined,\n      lastMeasuredAngle: undefined,\n      speedArr: [],\n      avgSpeed: undefined\n    };\n    this.motionData = {\n      currentAngle: 0,\n      targetAngle: undefined,\n      move: true\n    };\n    this.easing = [];\n  }\n  calculateEntryValues() {\n    this.speedMeasure.avgSpeed = (30 / ( this.rotationSpeed * 60 ) );\n\n  }\n\n  animateRotationY() {\n\n    if ( !this.speedMeasure.avgSpeed ) this.calculateEntryValues();\n\n    if ( this.motionData.move ){\n\n      let rotationSpeed = this.computeRotatingTime();\n      this.computeAvgSpeed(rotationSpeed);\n\n      if (this.easing.length !== 0) this.applyEasing();\n\n      if(this.easing.length === 0 && this.rotationSpeed < this.baseSpeed) this.accelerate();\n\n\n      this.motionData.currentAngle -= this.rotationSpeed;\n      this.motionData.currentAngle = this.motionData.currentAngle <= -360 ? 0 : this.motionData.currentAngle;\n\n      this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this.motionData.currentAngle}deg)` );\n\n      // targetAngle is set in click event, so after click event rotation will stop\n\n      if( Math.round(this.motionData.currentAngle) === this.motionData.targetAngle ){\n        this.motionData.move = false;\n        this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this.motionData.targetAngle}deg)` )\n      }\n\n      window.requestAnimationFrame( ()=> this.animateRotationY() )\n    }\n    else {\n      this.animatePlane();\n    }\n  }\n\n\n  computeEasing(direction){\n    let distance = Math.abs( Math.abs(this.motionData.targetAngle) - Math.abs(this.motionData.currentAngle) );\n\n    let steps = distance < 20 ? 5 : 10;\n    let threshold, delay, speed, speedChange, startEase, slowAngles, easing = [];\n    let baseSpeed = this.rotationSpeed;\n\n    switch (true) {\n      case distance <= 10 :\n        delay = 0;\n        break;\n      case distance <= 20 :\n        delay = 3;\n        break;\n      case distance <= 30 :\n        delay = 8;\n        break;\n      case distance <= 40 :\n        delay = 15;\n        break;\n      case distance <= 50 :\n        delay = 24;\n        break;\n      case distance <= 60 :\n        delay = 32;\n        break;\n      case distance <= 70 :\n        delay = 40;\n        break;\n      case distance <= 80 :\n        delay = 50;\n        break;\n      case distance <= 90 :\n        delay = 60;\n        break;\n\n    }\n\n    threshold = ( distance - delay ) / steps;\n    speedChange = baseSpeed/steps;\n    speed = baseSpeed;\n    startEase = direction === \"forth\" ? this.motionData.currentAngle - delay : this.motionData.currentAngle + delay;\n    slowAngles = startEase;\n\n    threshold = direction === \"forth\" ? -threshold : threshold;\n\n\n    for(let i = 1; i < steps; i++){\n      slowAngles += threshold;\n      speed -= speedChange;\n\n      if ( speed > 0 ) speed = speed < 0.1 ? 0.1 : speed;\n      else speed = speed > -0.1 ? -0.1 : speed;\n\n      easing[i-1] = [];\n\n      easing[i-1].push( Math.round( slowAngles ) );\n      easing[i-1].push( parseFloat( speed.toFixed(2) ) );\n    }\n    return easing;\n\n  }\n  applyEasing(){\n\n    this.easing.forEach(  value => {\n      if ( Math.round(this.motionData.currentAngle) === value[0] )\n        this.rotationSpeed = value[1];\n    })\n  }\n  computeRotatingTime(){\n\n    let currentAngle = Math.abs( Math.floor(this.motionData.currentAngle) );\n    let rotationTime;\n    let flag = !(currentAngle % 31);\n\n\n    // return if current angle haven't change from last measurement\n    if (this.speedMeasure.lastMeasuredAngle === currentAngle){\n      return null;\n    }\n\n\n    this.speedMeasure.lastMeasuredAngle = currentAngle;\n\n\n    if(this.speedMeasure.measureAngle === currentAngle){\n      this.speedMeasure.stop = new Date();\n      rotationTime =  (this.speedMeasure.stop - this.speedMeasure.start)/1000;\n      return rotationTime;\n    }\n    //every 31 degrees start time, and angle, at which speed will be measured, are set\n    if ( flag ) {\n      this.speedMeasure.measureAngle = this.motionData.currentAngle === 360 ? 30 : currentAngle + 30;\n      this.speedMeasure.start = new Date();\n    }\n    return null\n  }\n  computeAvgSpeed(arg){\n\n    if ( arg === null ) return;\n\n    this.speedMeasure.speedArr.push(arg);\n\n    if ( this.speedMeasure.speedArr.length > 4 ){\n      this.speedMeasure.speedArr.shift();\n\n    }\n    this.speedMeasure.avgSpeed = this.speedMeasure.speedArr.reduce((a,b) => a + b, 0) / this.speedMeasure.speedArr.length;\n\n  }\n\n  getTargetAngle (e) {\n\n    const targetId = $(e.target).attr(\"id\");\n\n    switch (targetId) {\n      case \"front\":\n        this.motionData.targetAngle = 0;\n        break;\n      case \"right\":\n        this.motionData.targetAngle = -90;\n        break;\n      case \"back\":\n        this.motionData.targetAngle = -180;\n        break;\n      case \"left\":\n        this.motionData.targetAngle = -270;\n        break;\n    }\n  }\n\n  shouldChangeDirection(){\n    let direction = \"forth\";\n    if( this.motionData.targetAngle === 0 ){\n      //if clicked in front plane, which set target angle to 0 , must have special check, cause current angle is always lesser than 0\n      this.rotationSpeed = this.motionData.currentAngle < -180 ? this.rotationSpeed : -this.rotationSpeed;\n      direction = this.motionData.currentAngle < -180 ? \"forth\" :  \"back\"\n    } else if ( this.motionData.currentAngle < this.motionData.targetAngle ){\n      //all the other cases\n      this.rotationSpeed = -this.rotationSpeed;\n      direction = \"back\"\n    }\n    return direction\n  }\n\n  animatePlane(){\n\n    let myPlane = this.planes.filter( ( i,el ) => $(el).attr('id') === this.clickedId);\n\n    myPlane.addClass(\"focus\")\n  }\n\n  planeClickEvent(flag){\n    if(flag){\n      this.planes.on( 'click', (e)=> {\n        let target = $(e.currentTarget);\n        e.stopPropagation();\n        this.getTargetAngle(e);\n        this.clickedId = e.target.id;\n\n        let direction = this.shouldChangeDirection();\n        this.easing = this.computeEasing(direction);\n\n        target.css('cursor', 'initial');\n\n        $('body')\n          .css('cursor', 'pointer')\n          .one('click', (e) => {\n            target.css('cursor', 'pointer');\n            $(e.currentTarget).css('cursor', 'initial');\n            this.restoreAnimation();\n          });\n\n      } )\n    } else {\n      this.planes.off()\n    }\n\n  }\n\n  restoreAnimation(){\n    let targetPlane = this.planes\n      .filter( ( i,el ) => $(el).attr('id') === this.clickedId);\n      targetPlane.removeClass(\"focus\");\n    this.easing = [];\n    this.motionData.move = true;\n    this.motionData.targetAngle = undefined;\n    this.clickedId = '';\n    this.rotationSpeed = this.rotationSpeed < 0 ? -this.rotationSpeed : this.rotationSpeed;\n\n    targetPlane.one('transitionend',  () => {\n      this.animateRotationY();\n    })\n\n  }\n\n  accelerate(){\n    this.rotationSpeed =  parseFloat( ( this.rotationSpeed + 0.01 ).toFixed(2) );\n  }\n\n}\n\nlet myElement = new tetragon3d($('#top-layer'),.5);\n\n$(() => {\n\n\n  myElement.animateRotationY();\n  myElement.planeClickEvent(true);\n\n});"]}