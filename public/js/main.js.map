{"version":3,"sources":["main.js"],"names":["htmlElement","constructor","element","this","copy","clone","remove","append","parent","tetragon3d","speed","super","rotationSpeed","planes","children","timeData","then","undefined","now","motionData","currentAngle","targetAngle","move","animateRotationY","computeRotatingTime","css","window","requestAnimationFrame","computeTransitionSpeed","Math","abs","angle","rotationTime","measure","floor","Number","timeDatathen","Date","timeDatanow","getTargetAngle","e","$","target","attr","planeClickEvent","flag","transitionSpeed","off","myElement","easing","easeOutQuad","t","b","c","d"],"mappings":"AAAA,MAAMA,YACJC,YAAYC,GACVC,KAAKD,QAAUA,EAEjBE,OACE,OAAOD,KAAKD,QAAQG,QAEtBC,SACEH,KAAKD,QAAQI,SAEfC,OAAOC,GACHL,KAAKD,QAAQK,OAAOC,IAI1B,MAAMC,mBAAmBT,YACvBC,YAAYC,EAASQ,GACnBC,MAAMT,GACNC,KAAKS,cAAgBF,EAErBP,KAAKU,OAASV,KAAKD,QAAQY,SAAS,OACpCX,KAAKY,SAAW,CACdC,UAAMC,EACNC,SAAKD,GAEPd,KAAKgB,WAAa,CAChBC,aAAc,EACdC,iBAAaJ,EACbP,WAAOO,EACPK,MAAM,GAKVC,mBAEOpB,KAAKgB,WAAWG,OACnBnB,KAAKgB,WAAWT,MAAQP,KAAKqB,oBAAqB,IAClDrB,KAAKgB,WAAWC,aAAejB,KAAKgB,WAAWC,cAAgB,IAAM,EAAIjB,KAAKgB,WAAWC,aACzFjB,KAAKgB,WAAWC,cAAgBjB,KAAKS,cAErCT,KAAKD,QAAQuB,IAAK,2CAA4CtB,KAAKgB,WAAWC,oBAE9EM,OAAOC,sBAAuB,IAAKxB,KAAKoB,qBAI5CK,yBAGE,OAFeC,KAAKC,IAAI3B,KAAKgB,WAAWE,aAAeQ,KAAKC,IAAI3B,KAAKgB,WAAWC,eACzD,GACRjB,KAAKgB,WAAWT,MAGjCc,oBAAoBO,GAElB,IAAIC,EACAC,EAAUJ,KAAKC,IAAKD,KAAKK,MAAM/B,KAAKgB,WAAWC,eAKjDY,OAHsB,IAApBG,OAAOF,GAAgB9B,KAAKiC,aAAe,IAAIC,KAE3CC,IAAL,EAAoBP,IAAKK,KAAAA,YAAc,IAAAC,MACxCL,KAAAA,aAAsBM,KAAAA,cACtBN,GAAA7B,KAAmBc,YAAnBd,KAAAiC,cAAA,IACAjC,KAAKiC,iBAALnB,EACAd,KAAAiC,kBAAAnB,EACDe,GAEF7B,KAAAgB,WAAAT,MAED6B,eAAgBC,GAKZ,OAHeC,EAAED,EAAEE,QAAQC,KAAK,OAI9B,IAAA,QACAxC,KAAAgB,WAAAE,YAAA,EACF,MACE,IAAA,QACAlB,KAAAgB,WAAAE,aAAA,GACF,MACE,IAAA,OACAlB,KAAAgB,WAAAE,aAAA,IACF,MACE,IAAA,OACAlB,KAAAgB,WAAAE,aAAA,KAKJuB,gBAAQC,GACNA,EACE1C,KAAAU,OAAK0B,GAAAA,QAALC,IAAArC,KAAKoC,eAAeC,GAEpB,IAAIM,EAAkB3C,KAAKyB,yBAE3BzB,KAAKgB,WAAWG,MAAO,EALzBnB,KAAAD,QAYKuB,IAAA,oBAAAqB,eACAjC,IAAAA,0CAALV,KAAAgB,WAAAE,qBAzF8BlB,KAAAU,OAAAkC,OAyGhCN,EAAA,KACD,IAHDO,EAAA,IAAAvC,WAAAgC,EAAA,cAAA,IAHAO,EAAUzB,mBAQVyB,EAAIC,iBAAcC,GALlBrB,KAAKqB,YAAc,SAAUC,EAAGC,EAAGC,EAAGC,GAEpC,OAAQD,GADRF,GAAKG,IACUH,EAAE,GAAKC,GAGXvB,KAAKqB,YAAY,GAAI,GAAG,GAAG","file":"main.js","sourcesContent":["class htmlElement {\n  constructor(element){\n    this.element = element\n  }\n  copy(){\n    return this.element.clone()\n  }\n  remove(){\n    this.element.remove()\n  }\n  append(parent){\n      this.element.append(parent)\n  }\n}\n\nclass tetragon3d extends htmlElement{\n  constructor(element ,speed){\n    super(element);\n    this.rotationSpeed = speed;\n\n    this.planes = this.element.children('div');\n    this.timeData = {\n      then: undefined,\n      now: undefined\n    };\n    this.motionData = {\n      currentAngle: 0,\n      targetAngle: undefined,\n      speed: undefined,\n      move: true\n\n    }\n  }\n\n  animateRotationY() {\n\n    if ( this.motionData.move ){\n      this.motionData.speed = this.computeRotatingTime( 45 );\n      this.motionData.currentAngle = this.motionData.currentAngle < -360 ? 0 : this.motionData.currentAngle;\n      this.motionData.currentAngle -= this.rotationSpeed;\n\n      this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this.motionData.currentAngle}deg)` );\n\n      window.requestAnimationFrame( ()=> this.animateRotationY() )\n    }\n  }\n\n  computeTransitionSpeed(){\n    let distance = Math.abs(this.motionData.targetAngle) - Math.abs(this.motionData.currentAngle);\n    let ratio = distance / 45;\n    return ratio * this.motionData.speed\n  }\n\n  computeRotatingTime(angle){\n\n    let rotationTime;\n    let measure = Math.abs( Math.floor(this.motionData.currentAngle) );\n\n    if (Number(measure) === 1) this.timeDatathen = new Date();\n    else if (measure === 1 + angle)  this.timeDatanow = new Date;\n    if(this.timeDatanow && this.timeDatathen) {\n      rotationTime =  (this.timeDatanow - this.timeDatathen)/1000;\n      this.timeDatanow = undefined;\n      this.timeDatathen = undefined;\n      return rotationTime;\n    }\n    return this.motionData.speed;\n  }\n\n  getTargetAngle (e) {\n\n    const targetId = $(e.target).attr(\"id\");\n\n    switch (targetId) {\n      case \"front\":\n        this.motionData.targetAngle = 0;\n        break;\n      case \"right\":\n        this.motionData.targetAngle = -90;\n        break;\n      case \"back\":\n        this.motionData.targetAngle = -180;\n        break;\n      case \"left\":\n        this.motionData.targetAngle = -270;\n        break;\n    }\n  }\n\n  planeClickEvent(flag){\n    if(flag){\n      this.planes.on('click', (e)=> {\n        this.getTargetAngle(e);\n\n        let transitionSpeed = this.computeTransitionSpeed();\n\n        this.motionData.move = false;\n\n        this.element\n          .css('transition', `all ${transitionSpeed}s ease-out`)\n          .css('transform', `translateZ(-250px) rotateY(${ this.motionData.targetAngle }deg)`)\n\n      })\n    } else {\n      this.planes.off()\n    }\n\n  }\n\n\n\n}\n\n$(() => {\n  let myElement = new tetragon3d($('#top-layer'),0.8);\n  myElement.animateRotationY();\n  myElement.planeClickEvent(true);\n\n  Math.easeOutQuad = function (t, b, c, d) {\n    t /= d;\n    return -c * t*(t-2) + b;\n  };\n\n  let easing = Math.easeOutQuad(0.6,54,36,0.4);\n});"]}