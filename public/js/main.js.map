{"version":3,"sources":["main.js"],"names":["htmlElement","constructor","element","this","copy","clone","remove","append","parent","tetragon3d","speed","super","rotationSpeed","planes","children","timeData","then","undefined","now","motionData","currentAngle","targetAngle","move","measureAngle","animateRotationY","computeRotatingTime","css","Math","ceil","window","requestAnimationFrame","computeTransitionSpeed","distance","abs","rotationTime","floor","flag","Date","console","getTargetAngle","targetId","$","e","target","attr","planeClickEvent","transitionSpeed","shouldChangeDirection","off","myElement","easing","easeOutQuad","t","b","c","d"],"mappings":"AAAA,MAAMA,YACJC,YAAYC,GACVC,KAAKD,QAAUA,EAEjBE,OACE,OAAOD,KAAKD,QAAQG,QAEtBC,SACEH,KAAKD,QAAQI,SAEfC,OAAOC,GACHL,KAAKD,QAAQK,OAAOC,IAI1B,MAAMC,mBAAmBT,YACvBC,YAAYC,EAASQ,GACnBC,MAAMT,GACNC,KAAKS,cAAgBF,EAAQ,EAAI,EAAIA,EAErCP,KAAKU,OAASV,KAAKD,QAAQY,SAAS,OACpCX,KAAKY,SAAW,CACdC,UAAMC,EACNC,SAAKD,GAEPd,KAAKgB,WAAa,CAChBC,aAAc,EACdC,iBAAaJ,EACbP,WAAOO,EACPK,MAAM,EACNC,kBAAcN,GAKlBO,mBAEOrB,KAAKgB,WAAWG,OAEnBnB,KAAKgB,WAAWC,aAAejB,KAAKgB,WAAWC,eAAiB,IAAM,EAAIjB,KAAKgB,WAAWC,aAE1FjB,KAAKgB,WAAWT,MAAQP,KAAKsB,sBAC7BtB,KAAKgB,WAAWC,cAAgBjB,KAAKS,cAErCT,KAAKD,QAAQwB,IAAK,2CAA4CvB,KAAKgB,WAAWC,oBAG1EO,KAAKC,KAAKzB,KAAKgB,WAAWC,gBAAkBjB,KAAKgB,WAAWE,cAC9DlB,KAAKgB,WAAWG,MAAO,GAG1BO,OAAAC,sBAAA,IAAA3B,KAAAqB,qBAIDO,yBAGD,OAFaC,KAAAA,IAAW7B,KAAvBgB,WAAAE,aAAAM,KAAAM,IAAA9B,KAAAgB,WAAAC,eACoBD,GACrBhB,KAAAgB,WAAAT,MAEDe,sBAGI,IAAIS,EAAJP,KAAAM,IAAAN,KAAAQ,MAAAhC,KAAAgB,WAAAC,eACEgB,IAAShB,EAAe,IAG1BA,IAAoBjB,KAAIkC,WAAxBd,eACDpB,KAAAY,SAAAG,IAAA,IAAAmB,MAGCC,IACAA,QAAKnB,IAAAA,MAAWI,GAChBpB,KAAKY,WAASC,aAAdI,EAAA,GAEDjB,KAAAY,SAAAC,KAAA,IAAAqB,MAaDE,eAAMC,GAIF,OAFJC,EAAAC,EAAAC,QAAAC,KAAA,OAGI,IAAA,QACFzC,KAAKgB,WAALE,YAAA,EACE,MACA,IAAA,QACFlB,KAAKgB,WAALE,aAAA,GACE,MACA,IAAA,OACFlB,KAAKgB,WAALE,aAAA,IACE,MACA,IAAA,OAZJlB,KAAAgB,WAAAE,aAAA,KAkBDiB,wBACAnC,KAAAgB,WAAAC,aAAAjB,KAAAgB,WAAAE,cAFGlB,KAAKS,eAAiBT,KAAKS,eAI/BiC,QAAAA,IAAAA,KAAgBT,WAAKhB,aAAAjB,KAAAgB,WAAAE,aAGfwB,gBAAKN,GAFNH,EAICjC,KAAAU,OAAIiC,GAAAA,QAAkBJ,IACtBvC,KAAK4C,eAAAA,GAGF5C,KAAA4B,yBACL5B,KAAKU,0BA1GyBV,KAAAU,OAAAmC,OA0HhCP,EAAA,KACD,IAHDQ,EAAA,IAAAxC,WAAAgC,EAAA,cAAA,IAHAQ,EAAUzB,mBAQVyB,EAAIC,iBAAcC,GALlBxB,KAAKwB,YAAc,SAAUC,EAAGC,EAAGC,EAAGC,GAEpC,OAAQD,GADRF,GAAKG,IACUH,EAAE,GAAKC,GAGX1B,KAAKwB,YAAY,GAAI,GAAG,GAAG","file":"main.js","sourcesContent":["class htmlElement {\n  constructor(element){\n    this.element = element\n  }\n  copy(){\n    return this.element.clone()\n  }\n  remove(){\n    this.element.remove()\n  }\n  append(parent){\n      this.element.append(parent)\n  }\n}\n\nclass tetragon3d extends htmlElement{\n  constructor(element ,speed){\n    super(element);\n    this.rotationSpeed = speed > 1 ? 1 : speed;\n\n    this.planes = this.element.children('div');\n    this.timeData = {\n      then: undefined,\n      now: undefined\n    };\n    this.motionData = {\n      currentAngle: 0,\n      targetAngle: undefined,\n      speed: undefined,\n      move: true,\n      measureAngle: undefined\n\n    }\n  }\n\n  animateRotationY() {\n\n    if ( this.motionData.move ){\n\n      this.motionData.currentAngle = this.motionData.currentAngle <= -360 ? 0 : this.motionData.currentAngle;\n\n      this.motionData.speed = this.computeRotatingTime();\n      this.motionData.currentAngle -= this.rotationSpeed;\n\n      this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this.motionData.currentAngle}deg)` );\n\n      // targetAngle is set in click event, so after click event rotation will stop\n      if( Math.ceil(this.motionData.currentAngle) === this.motionData.targetAngle )\n        this.motionData.move = false;\n\n      window.requestAnimationFrame( ()=> this.animateRotationY() )\n    }\n  }\n\n  computeTransitionSpeed(){\n    let distance = Math.abs(this.motionData.targetAngle) - Math.abs(this.motionData.currentAngle);\n    let ratio = distance / 45;\n    return ratio * this.motionData.speed\n  }\n\n  computeRotatingTime(){\n\n    let currentAngle = Math.abs( Math.floor(this.motionData.currentAngle) );\n      let rotationTime;\n    let flag = !(currentAngle % 30);\n\n    if ( currentAngle === this.motionData.measureAngle ) {\n      this.timeData.now = new Date();\n    }\n\n    if ( flag ) {\n      console.log('aaa', currentAngle);\n      this.motionData.measureAngle = currentAngle + 30;\n      this.timeData.then = new Date();\n\n    }\n\n    /*if(this.timeData.now && this.timeData.then) {\n      rotationTime =  (this.timeData.now - this.timeData.then)/1000;\n      this.timeData.now = undefined;\n      this.timeData.then = undefined;\n      return rotationTime;\n    }\n    return this.motionData.speed;*/\n  }\n\n  getTargetAngle (e) {\n\n    const targetId = $(e.target).attr(\"id\");\n\n    switch (targetId) {\n      case \"front\":\n        this.motionData.targetAngle = 0;\n        break;\n      case \"right\":\n        this.motionData.targetAngle = -90;\n        break;\n      case \"back\":\n        this.motionData.targetAngle = -180;\n        break;\n      case \"left\":\n        this.motionData.targetAngle = -270;\n        break;\n    }\n  }\n  shouldChangeDirection(){\n    if ( this.motionData.currentAngle < this.motionData.targetAngle )\n      this.rotationSpeed = -this.rotationSpeed;\n   console.log(this.motionData.currentAngle < this.motionData.targetAngle);\n  }\n\n  planeClickEvent(flag){\n    if(flag){\n      this.planes.on( 'click', (e)=> {\n        this.getTargetAngle(e);\n\n        let transitionSpeed = this.computeTransitionSpeed();\n        this.shouldChangeDirection();\n\n      } )\n    } else {\n      this.planes.off()\n    }\n\n  }\n\n\n\n}\n\n$(() => {\n  let myElement = new tetragon3d($('#top-layer'),.6);\n  myElement.animateRotationY();\n  myElement.planeClickEvent(true);\n\n  Math.easeOutQuad = function (t, b, c, d) {\n    t /= d;\n    return -c * t*(t-2) + b;\n  };\n\n  let easing = Math.easeOutQuad(0.6,54,36,0.4);\n});"]}