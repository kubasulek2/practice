{"version":3,"sources":["main.js"],"names":["htmlElement","constructor","element","this","copy","clone","remove","append","parent","tetragon3d","speed","super","rotationSpeed","planes","children","speedMeasure","start","undefined","stop","lastMeasuredAngle","speedNow","speedArr","avgSpeed","motionData","currentAngle","targetAngle","move","calculateEntryValues","animateRotationY","computeAvgSpeed","css","Math","ceil","window","requestAnimationFrame","computeTransitionSpeed","computeRotatingTime","abs","rotationTime","floor","flag","measureAngle","arg","Date","push","length","shift","$","attr","reduce","a","b","console","targetId","getTargetAngle","e","target","shouldChangeDirection","planeClickEvent","on","off","myElement","easeOutQuad","t","c","d"],"mappings":"AAAA,MAAMA,YACJC,YAAYC,GACVC,KAAKD,QAAUA,EAEjBE,OACE,OAAOD,KAAKD,QAAQG,QAEtBC,SACEH,KAAKD,QAAQI,SAEfC,OAAOC,GACHL,KAAKD,QAAQK,OAAOC,IAI1B,MAAMC,mBAAmBT,YACvBC,YAAYC,EAASQ,GACnBC,MAAMT,GACNC,KAAKS,cAAgBF,EAAQ,EAAI,EAAIA,EAErCP,KAAKU,OAASV,KAAKD,QAAQY,SAAS,OACpCX,KAAKY,aAAe,CAClBC,WAAOC,EACPC,UAAMD,EACNE,uBAAmBF,EACnBG,cAAUH,EACVI,SAAU,GACVC,cAAUL,GAEZd,KAAKoB,WAAa,CAChBC,aAAc,EACdC,iBAAaR,EACbS,MAAM,GAGVC,uBACExB,KAAKY,aAAaO,SAAY,IAAA,GAAOnB,KAAKS,eAI5CgB,mBAIE,GAFMzB,KAAKY,aAAaO,UAAWnB,KAAKwB,uBAEnCxB,KAAKoB,WAAWG,KAAM,CAGzB,IAAAd,EAAAT,KAAqBS,sBAArBT,KAAK0B,gBAAgBjB,GAGrBT,KAAKoB,WAAWC,cAAerB,KAAKoB,cAApCpB,KAAKoB,WAAWC,aAAerB,KAAKoB,WAAWC,eAAiB,IAAM,EAAIrB,KAAKoB,WAAWC,aAE1FrB,KAAKD,QAAQ4B,IAAK,2CAA4C3B,KAAKoB,WAAWC,oBAG1EO,KAAKC,KAAK7B,KAAKoB,WAAWC,gBAAkBrB,KAAKoB,WAAWE,cAGhEQ,KAAOC,WAAAA,MAAAA,GAEVD,OAAAC,sBAAA,IAAA/B,KAAAyB,qBAMCO,yBAGFC,OAFCL,KAAAM,IAAAlC,KAAAoB,WAAAE,aAAAM,KAAAM,IAAAlC,KAAAoB,WAAAC,eAFwB,GAIzBY,KAAqBrB,aAAAK,SAGnBgB,sBADA,IAKAE,EALId,EAAeO,KAAKM,IAAKN,KAAKQ,MAAMpC,KAAKoB,WAAWC,eAMpDgB,IAAKzB,EAAaI,IAKtB,OAAAhB,KAAKY,aAAaI,oBAAoBK,EAJ7B,MAUPrB,KAAAY,aAAOuB,kBAAPd,EAGFrB,KAAAY,aAAY0B,eAAAjB,GACVrB,KAAKY,aAAa0B,KAAAA,IAAAA,KAClBH,GAAAnC,KAAkBa,aAAQE,KAA1Bf,KAAAY,aAAAC,OAAA,MAIJa,IALI1B,KAAKY,aAAa0B,aAAgD,MAAjCtC,KAAKoB,WAAWC,aAAuB,GAAKA,EAAe,GAO9FrB,KAAKuC,aAAe1B,MAAA,IAAA2B,MAEf5B,OAELc,gBAAUd,GAGT,OAAA2B,IALDvC,KAAKY,aAAaM,SAASuB,KAAKF,GAUjCvC,KAAAY,aAAAM,SAAAwB,OAAA,GAPG1C,KAAKY,aAAaM,SAASyB,QAW7B3C,KAAAY,aAAiBgC,SAAYC,KAAKjC,aAAlCM,SAAA4B,OAAA,CAAAC,EAAAC,IAAAD,EAAAC,EAAA,GAAAhD,KAAAY,aAAAM,SAAAwB,OAEAO,QAAQC,IAAAA,KAARtC,aAAAM,SAAAlB,KAAAY,aAAAO,WAIEgC,eAAAC,GAIE,OAFAR,EAAAQ,EAAAC,QAAAR,KAAA,OAGA,IAAA,QACF7C,KAAKoB,WAALE,YAAA,EACE,MACA,IAAA,QAZJtB,KAAAoB,WAAAE,aAAA,GAcD,MACDgC,IAAAA,OACMtD,KAAKoB,WAAWE,aAAhB,IACF,MACA,IAAKb,OAFPT,KAIOoB,WAAUA,aAAWC,KAL9BiC,wBAWqB,IAArBC,KAAAA,WAAqBjC,YAEjBtB,KAAKU,cAAWV,KAASoB,WAAMC,cAAA,IAAArB,KAAAS,eAAAT,KAAAS,cARrBT,KAAKoB,WAAWC,aAAerB,KAAKoB,WAAWE,cAYvDtB,KAAAS,eAAK6C,KAAAA,eAKRC,gBAAAlB,GAEFA,EAXGrC,KAAKU,OAAO8C,GAAI,QAAUJ,IAlIIpD,KAAAmD,eAAAC,GAmJ5BpD,KAAAgC,yBAbAhC,KAAKsD,0BAIPtD,KAAKU,OAAO+C,OASlBb,EAAE,KAEA,IAAIc,EAAY,IAAIpD,WAAWsC,EAAE,cAAc,IAC/Cc,EAAUjC,mBACViC,EAAUH,iBAAgB,GAE1B3B,KAAK+B,YAAc,SAAUC,EAAGZ,EAAGa,EAAGC,GAEpC,OAAQD,GADRD,GAAKE,IACUF,EAAE,GAAKZ,GAGXpB,KAAK+B,YAAY,GAAI,GAAG,GAAG","file":"main.js","sourcesContent":["class htmlElement {\n  constructor(element){\n    this.element = element\n  }\n  copy(){\n    return this.element.clone()\n  }\n  remove(){\n    this.element.remove()\n  }\n  append(parent){\n      this.element.append(parent)\n  }\n}\n\nclass tetragon3d extends htmlElement{\n  constructor(element ,speed){\n    super(element);\n    this.rotationSpeed = speed > 1 ? 1 : speed;\n\n    this.planes = this.element.children('div');\n    this.speedMeasure = {\n      start: undefined,\n      stop: undefined,\n      lastMeasuredAngle: undefined,\n      speedNow: undefined,\n      speedArr: [],\n      avgSpeed: undefined\n    };\n    this.motionData = {\n      currentAngle: 0,\n      targetAngle: undefined,\n      move: true\n    }\n  }\n  calculateEntryValues() {\n    this.speedMeasure.avgSpeed = (30 / ( this.rotationSpeed * 60 ) );\n\n  }\n\n  animateRotationY() {\n\n    if ( !this.speedMeasure.avgSpeed ) this.calculateEntryValues();\n\n    if ( this.motionData.move ){\n\n      let rotationSpeed = this.computeRotatingTime();\n      this.computeAvgSpeed(rotationSpeed);\n\n      this.motionData.currentAngle -= this.rotationSpeed;\n      this.motionData.currentAngle = this.motionData.currentAngle <= -360 ? 0 : this.motionData.currentAngle;\n\n      this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this.motionData.currentAngle}deg)` );\n\n      // targetAngle is set in click event, so after click event rotation will stop\n      if( Math.ceil(this.motionData.currentAngle) === this.motionData.targetAngle )\n        this.motionData.move = false;\n\n      window.requestAnimationFrame( ()=> this.animateRotationY() )\n    }\n  }\n\n\n  computeTransitionSpeed(){\n    let distance = Math.abs(this.motionData.targetAngle) - Math.abs(this.motionData.currentAngle);\n    let ratio = distance / 45;\n    return ratio * this.speedMeasure.speedNow\n  }\n\n  computeRotatingTime(){\n\n    let currentAngle = Math.abs( Math.floor(this.motionData.currentAngle) );\n    let rotationTime;\n    let flag = !(currentAngle % 31);\n\n\n    // return if current angle haven't change from last measurement\n    if (this.speedMeasure.lastMeasuredAngle === currentAngle){\n      return null;\n    }\n\n\n    this.speedMeasure.lastMeasuredAngle = currentAngle;\n\n\n    if(this.speedMeasure.measureAngle === currentAngle){\n      this.speedMeasure.stop = new Date();\n      rotationTime =  (this.speedMeasure.stop - this.speedMeasure.start)/1000;\n      return rotationTime;\n    }\n    //every 31 degrees start time, and angle, at which speed will be measured, are set\n    if ( flag ) {\n      this.speedMeasure.measureAngle = this.motionData.currentAngle === 360 ? 30 : currentAngle + 30;\n      this.speedMeasure.start = new Date();\n    }\n    return null\n  }\n  computeAvgSpeed(arg){\n\n    if ( arg === null ) return;\n\n    this.speedMeasure.speedArr.push(arg);\n\n    if ( this.speedMeasure.speedArr.length > 4 ){\n      this.speedMeasure.speedArr.shift();\n\n    }\n    this.speedMeasure.avgSpeed = this.speedMeasure.speedArr.reduce((a,b) => a + b, 0) / this.speedMeasure.speedArr.length;\n\n    console.log(this.speedMeasure.speedArr,this.speedMeasure.avgSpeed);\n\n  }\n\n  getTargetAngle (e) {\n\n    const targetId = $(e.target).attr(\"id\");\n\n    switch (targetId) {\n      case \"front\":\n        this.motionData.targetAngle = 0;\n        break;\n      case \"right\":\n        this.motionData.targetAngle = -90;\n        break;\n      case \"back\":\n        this.motionData.targetAngle = -180;\n        break;\n      case \"left\":\n        this.motionData.targetAngle = -270;\n        break;\n    }\n  }\n  shouldChangeDirection(){\n    if( this.motionData.targetAngle === 0 ){\n      //if clicked in front plane, which set target angle to 0 , must have special check, cause current angle is always lesser than 0\n      this.rotationSpeed = this.motionData.currentAngle < -180 ? this.rotationSpeed : -this.rotationSpeed\n\n    } else if ( this.motionData.currentAngle < this.motionData.targetAngle )\n      //all the other cases\n      this.rotationSpeed = -this.rotationSpeed;\n\n  }\n\n  planeClickEvent(flag){\n    if(flag){\n      this.planes.on( 'click', (e)=> {\n        this.getTargetAngle(e);\n\n        let transitionSpeed = this.computeTransitionSpeed();\n        this.shouldChangeDirection();\n\n      } )\n    } else {\n      this.planes.off()\n    }\n\n  }\n\n\n\n}\n\n$(() => {\n\n  let myElement = new tetragon3d($('#top-layer'),.5);\n  myElement.animateRotationY();\n  myElement.planeClickEvent(true);\n\n  Math.easeOutQuad = function (t, b, c, d) {\n    t /= d;\n    return -c * t*(t-2) + b;\n  };\n\n  let easing = Math.easeOutQuad(0.6,54,36,0.4);\n});"]}