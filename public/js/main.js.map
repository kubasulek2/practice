{"version":3,"sources":["main.js"],"names":["$","on","this","parents","toggleClass"],"mappings":"AA+VAA,EAAE,KAEAA,EAAE,oBAAoBC,GAAG,QAAS,WAChCD,EAAEE,MAAMC,QAAQ,YAAYC,YAAY","file":"main.js","sourcesContent":["/*\n\nlet arr = [1,2,3,4];\n\nlet last = _.last(arr);\n\n\nconst CreateWatch = function () {\n  let running = false,\n    duration = 0,\n    startTime = 0,\n    currentTime = 0,\n    stopTime = 0,\n    timer = undefined;\n\n  this.getDuration = function () {\n    currentTime = new Date();\n    duration = (currentTime - startTime)/1000;\n    return duration.toFixed(2)\n  };\n\n  this.start = function () {\n    if (this.running) return;\n\n    let clock = $('.timer');\n    startTime === 0 ? startTime = new Date(): startTime = new Date() - (duration * 1000);\n    running = true;\n    timer = setInterval(()=> {\n      duration = this.getDuration;\n      clock.text(duration)\n    },10)\n  };\n\n  this.stop = function () {\n    if (!running) return;\n\n    clearInterval(timer);\n    stopTime = new Date();\n    running = false;\n  };\n\n  this.reset = function () {\n    this.stop();\n    duration = 0;\n    startTime = 0;\n    currentTime = 0;\n    running = false;\n    $('.timer')\n      .text(\"0.00\");\n\n  };\n\n  this.createHtml = function () {\n    let wrapper = $('<div></div>');\n    let header = $('<h1>Timer:</h1>');\n    let timer = $('<span class=\"timer\">0.00</span>');\n    let span = $('<span>s</span>');\n    let start = $('<button>start</button>');\n    let stop = $('<button>stop</button>');\n    let reset = $('<button>reset</button>');\n    let clock = $('<div></div>');\n    clock\n        .append(timer)\n        .append(span);\n    wrapper\n      .append(header)\n      .append(clock)\n      .append(start)\n      .append(stop)\n      .append(reset);\n    $('body').append(wrapper);\n    start.on('click', ()=> this.start());\n    stop.on('click', ()=> this.stop());\n    reset.on('click', ()=> this.reset())\n  }\n};\n\nconst myWatch = new CreateWatch();\nmyWatch.createHtml();\n\n*/\n/*\n\nlet f = (y) => {\n  const x = 1;\n  return function () {\n    return x + y\n  }\n};\n\nlet z = 2;\nlet f2 = () => {\n  z += 2;\n};\nf2();\n\n\nlet object = {};\nlet property = \"a\";\nobject[property] = 2;\nconsole.log(object);\nObject.defineProperty(object,\"readOnly\",{\n  get: function () {\n    return 2\n  },\n  set: function () {\n    throw new Error(\"don't mess up with it\")\n  }\n});\n\n\n\nlet obj = {\n  name: \"kuba\"\n};\n\nObject.defineProperty(obj,'name',{\n  writable: false,\n  enumerable: false,\n  configurable:true\n});\n\n\nlet Constructor = function (value) {\n  this.value = value\n};\nlet myObj = new Constructor(2);\n\n\nconsole.log(Object.getPrototypeOf(myObj) === Constructor.prototype); // !!!!!!!\n\n\nfunction Circle(radius) {\n  let a = 2;\n  console.log(this);  // Circle object{}\n  this.radius = radius;\n  this.draw = function () {\n    console.log(a);\n  };\n  this.position = {x:0, y:0};\n}\nlet circleTwo = new Circle(2);\n\nconsole.dir(circleTwo);\n\n\nlet person = {name: \"Kuba\"};\nfor (let key in person)\n  console.log(key);\n\n\nlet objectBase = Object.getPrototypeOf(person);\nlet propertyDescriptor = Object.getOwnPropertyDescriptor(objectBase, 'toString');\nconsole.log(propertyDescriptor);\n\n\nlet Person = function (name) {\n  this.move = function () {\n    console.log('move');\n  };\n  this.name = name\n};\n\nPerson.prototype.doSth = function () {\n  this.move();\n  console.log(\"do something\");\n};\nlet kuba = new Person(\"Kuba\");\nkuba.doSth();*/\n/*\n\nconst Shape = function (color) {\n  this.color = color;\n};\nShape.prototype.duplicate = function () {\n  console.log('aaa');\n};\n\n\nfunction extend (child, parent) {\n  child.prototype = Object.create(parent.prototype);\n  child.prototype.constructor = child;\n}\nextend(Circle,Shape);\n\n\nlet c1 = new Circle(2, 'red');\nconsole.dir(c1);\n*/\n/*\n\nfunction mixin(object, ...sources) {\n  Object.assign(object,...sources)\n}\n\nconst canEat ={\n  eat: function () {\n    this.hunger--;\n    console.log('eating');\n  }\n};\n\nconst canWalk = {\n  walk: function () {\n    console.log('walking');\n  }\n};\n\nconst canSwim = {\n  swim: function () {\n    console.log('swimming');\n  }\n};\n\nfunction Person (hunger) {\n  this.hunger = hunger\n}\nfunction Fish (hunger){\n  this.hunger = hunger\n}\n\nmixin(Person.prototype, canEat, canWalk,);\nmixin(Fish.prototype, canEat, canSwim,);\nconst me = new Person(6);\nconst goldFish = new Fish(4);\n\nconsole.log(me);\n*/\n\n// function HtmlElement (){\n//   this.click = function () {\n//     console.log('clicked');\n//   }\n// }\n//\n// HtmlElement.prototype.focus = function () { console.log('focused') };\n//\n// function HtmlSelectElement (items=[]){\n//   this.items = items;\n//   this.add = function (el) { this.items.push(el) };\n//   this.remove = function (el) { this.items = this.items.filter((x) => x !== el) };\n//   this.render = function () {\n//     return `<select>${this.items.map( item => `\"/n\"  <option>${item}</option>`).join()}</select>`\n//   }\n// }\n// function  HtmlImageElement (src){\n//   this.src = src;\n//   this.render = function () {\n//     return `<img src=\"${this.src}\" />`\n//   }\n// }\n//\n// HtmlSelectElement.prototype = new HtmlElement();\n// HtmlSelectElement.prototype.constructor = HtmlSelectElement;\n//\n// HtmlImageElement.prototype = new HtmlElement();\n// HtmlImageElement.prototype.constructor = HtmlImageElement;\n//\n// const e = new HtmlElement();\n// const s = new HtmlSelectElement([1,2,3]);\n// const i = new HtmlImageElement('https://www.kuba.com');\n//\n//\n// const _pr = Symbol(); //underscore to tylko naming convention\n// const _draw = Symbol('method'); //mozna dodac jakas identyfikacje\n// class Person {\n//   constructor(age) {\n//     this.age = age;\n//     //private property\n//     this[_pr] = 2\n//   }\n//\n//   //Private Method\n//   [_draw]() {      // es6 feature \"computed property names\", wartosc zmiennej w [], bedzie nazwa wlasnosci/metody\n//     console.log(this[_pr]);\n//   }\n//   //Public Method with\n//   draw(){\n//     this[_draw]()\n//   }\n//\n// }\n//\n// const me = new Person(32);\n// console.log(me); //__proto__ Symbol(): Æ’ [_draw]()\n// console.log(Object.getOwnPropertyNames(me));//pusty array\n// console.log(Object.getOwnPropertySymbols(me));// [Symbol()]\n//\n// me.draw();\n// me[_draw]();\n// me[_pr]\n// class Mamal{\n//   eat(){ console.log('eating') }\n// }\n//\n// const _eyes = new WeakMap();\n// class Bat extends Mamal{\n//   constructor(legs, carnivorous){ //default arguments optional\n//     super(); // i tak musi byc super\n//     _eyes.set(this,2);\n//     this.legs = legs;\n//     this.carnivorous = carnivorous;\n//     this.fly = function () {\n//       console.log('fly with ' + _eyes.get(this) + \" eyes\");\n//     }\n// }\n// }\n//\n// let batman = new Bat(undefined, false);\n// batman.eat();\n// batman.fly();\n// console.log(batman.legs);\n// let _count = new WeakMap();\n// const _eval = new WeakMap();\n// let _items = new WeakMap();\n//\n// class Stack {\n//   constructor(){\n//     _count.set(this, 0);\n//     _items.set(this, []);\n//\n//     _eval.set(this, () => {\n//       if (_count.get( this ) === 0)\n//         throw new Error(\"Stack is Empty\");\n//     } );\n//   }\n//\n//   get count(){\n//     return _count.get(this)\n//   }\n//\n//   peep(){\n//     _eval.get(this)();\n//\n//     return _items.get(this)[ _items.get(this).length -1 ]\n//   }\n//   pop(){\n//     const items = _items.get(this);\n//     _eval.get(this)();\n//     _count.set(this, _count.get(this) - 1);\n//     return items.pop();\n//   }\n//   push(val){\n//     _items.get(this).push(val);\n//     _count.set(this, _count.get(this) + 1);\n//     return val\n//   }\n//\n// }\n//\n// const myStack = new Stack();\n$(()=>{\n  let stage = 0;\n  $('.example .button').on('click', function(){\n    $(this).parents('.example').toggleClass('stage-1');\n  });\n});\n\n"]}